import {Observable} from "rxjs/Observable";
import { ajax } from "rxjs/observable/dom/ajax";
import { map } from "rxjs/operators/map";
import { {{packageName}} } from "{{packageLocation}}";

type FirstArgument<T> = T extends (arg1: infer U, ...args: any[]) => any ? U : any;

export class {{clientName}} {
    private baseURL: string = "";

    constructor(baseURL: string) {
        this.baseURL = baseURL;
    }

    call<T extends keyof {{packageName}}.{{serviceName}},
            R = ReturnType<{{packageName}}.{{serviceName}}[T]>>
        (name: T, body: FirstArgument<{{packageName}}.{{serviceName}}[T]>, token?: string): Observable<R> {
            let headers = { "Content-Type": "application/json" };
            if (token !== undefined) {
                headers["Authorization"] = token;
            }
            const url = this.baseURL + "/" + name;

            return ajax({ url, body, headers, method: "POST" }).pipe(
                map(res => res.response as ReturnType<{{packageName}}.{{serviceName}}[T]>)
            );
        }

{{#each routes}}
public {{./name}}$ = (body: {{../packageName}}.{{./requestName}}, token?: string): Observable<{{../packageName}}.{{./responseName}}> => this.call("{{./name}}", body, token);
{{/each}}

}